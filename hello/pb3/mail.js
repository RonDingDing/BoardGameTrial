/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.pb3.Mail');
goog.provide('proto.pb3.Mail.ANS');
goog.provide('proto.pb3.Mail.REQ');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb3.Mail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb3.Mail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb3.Mail.displayName = 'proto.pb3.Mail';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb3.Mail.prototype.toObject = function(opt_includeInstance) {
  return proto.pb3.Mail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb3.Mail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb3.Mail.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, 0),
    exdata: msg.getExdata_asB64(),
    req: (f = msg.getReq()) && proto.pb3.Mail.REQ.toObject(includeInstance, f),
    ans: (f = msg.getAns()) && proto.pb3.Mail.ANS.toObject(includeInstance, f),
    error: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb3.Mail}
 */
proto.pb3.Mail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb3.Mail;
  return proto.pb3.Mail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb3.Mail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb3.Mail}
 */
proto.pb3.Mail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExdata(value);
      break;
    case 3:
      var value = new proto.pb3.Mail.REQ;
      reader.readMessage(value,proto.pb3.Mail.REQ.deserializeBinaryFromReader);
      msg.setReq(value);
      break;
    case 4:
      var value = new proto.pb3.Mail.ANS;
      reader.readMessage(value,proto.pb3.Mail.ANS.deserializeBinaryFromReader);
      msg.setAns(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb3.Mail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb3.Mail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb3.Mail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb3.Mail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getExdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getReq();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.pb3.Mail.REQ.serializeBinaryToWriter
    );
  }
  f = message.getAns();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.pb3.Mail.ANS.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb3.Mail.REQ = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb3.Mail.REQ, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb3.Mail.REQ.displayName = 'proto.pb3.Mail.REQ';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb3.Mail.REQ.prototype.toObject = function(opt_includeInstance) {
  return proto.pb3.Mail.REQ.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb3.Mail.REQ} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb3.Mail.REQ.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb3.Mail.REQ}
 */
proto.pb3.Mail.REQ.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb3.Mail.REQ;
  return proto.pb3.Mail.REQ.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb3.Mail.REQ} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb3.Mail.REQ}
 */
proto.pb3.Mail.REQ.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb3.Mail.REQ.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb3.Mail.REQ.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb3.Mail.REQ} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb3.Mail.REQ.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.pb3.Mail.REQ.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb3.Mail.REQ.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.pb3.Mail.REQ.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb3.Mail.REQ.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb3.Mail.ANS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb3.Mail.ANS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb3.Mail.ANS.displayName = 'proto.pb3.Mail.ANS';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb3.Mail.ANS.prototype.toObject = function(opt_includeInstance) {
  return proto.pb3.Mail.ANS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb3.Mail.ANS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb3.Mail.ANS.toObject = function(includeInstance, msg) {
  var f, obj = {
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb3.Mail.ANS}
 */
proto.pb3.Mail.ANS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb3.Mail.ANS;
  return proto.pb3.Mail.ANS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb3.Mail.ANS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb3.Mail.ANS}
 */
proto.pb3.Mail.ANS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb3.Mail.ANS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb3.Mail.ANS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb3.Mail.ANS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb3.Mail.ANS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.pb3.Mail.ANS.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb3.Mail.ANS.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 Code = 1;
 * @return {number}
 */
proto.pb3.Mail.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb3.Mail.prototype.setCode = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes Exdata = 2;
 * @return {string}
 */
proto.pb3.Mail.prototype.getExdata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes Exdata = 2;
 * This is a type-conversion wrapper around `getExdata()`
 * @return {string}
 */
proto.pb3.Mail.prototype.getExdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExdata()));
};


/**
 * optional bytes Exdata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExdata()`
 * @return {!Uint8Array}
 */
proto.pb3.Mail.prototype.getExdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExdata()));
};


/** @param {!(string|Uint8Array)} value */
proto.pb3.Mail.prototype.setExdata = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional REQ Req = 3;
 * @return {?proto.pb3.Mail.REQ}
 */
proto.pb3.Mail.prototype.getReq = function() {
  return /** @type{?proto.pb3.Mail.REQ} */ (
    jspb.Message.getWrapperField(this, proto.pb3.Mail.REQ, 3));
};


/** @param {?proto.pb3.Mail.REQ|undefined} value */
proto.pb3.Mail.prototype.setReq = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.pb3.Mail.prototype.clearReq = function() {
  this.setReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb3.Mail.prototype.hasReq = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ANS Ans = 4;
 * @return {?proto.pb3.Mail.ANS}
 */
proto.pb3.Mail.prototype.getAns = function() {
  return /** @type{?proto.pb3.Mail.ANS} */ (
    jspb.Message.getWrapperField(this, proto.pb3.Mail.ANS, 4));
};


/** @param {?proto.pb3.Mail.ANS|undefined} value */
proto.pb3.Mail.prototype.setAns = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.pb3.Mail.prototype.clearAns = function() {
  this.setAns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb3.Mail.prototype.hasAns = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 Error = 5;
 * @return {number}
 */
proto.pb3.Mail.prototype.getError = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb3.Mail.prototype.setError = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


